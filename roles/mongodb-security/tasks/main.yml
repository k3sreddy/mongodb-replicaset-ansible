---
# MongoDB security configuration tasks

- name: Stop MongoDB service for security configuration
  systemd:
    name: mongod
    state: stopped
  tags: security

- name: Create SSL certificate directory
  file:
    path: "{{ mongodb_ssl_cert_dir }}"
    state: directory
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0750'
  tags: ssl-setup

- name: Generate CA private key
  openssl_privatekey:
    path: "{{ ca_key_file }}"
    size: "{{ ssl_key_size }}"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0400'
  tags: ssl-ca

- name: Generate CA certificate signing request
  openssl_csr:
    path: "{{ mongodb_ssl_cert_dir }}/ca.csr"
    privatekey_path: "{{ ca_key_file }}"
    common_name: "{{ ssl_cert_config.ca.common_name }}"
    country_name: "{{ ssl_country }}"
    state_or_province_name: "{{ ssl_state }}"
    locality_name: "{{ ssl_city }}"
    organization_name: "{{ ssl_organization }}"
    organizational_unit_name: "{{ ssl_organizational_unit }}"
    basic_constraints:
      - "CA:TRUE"
    key_usage:
      - keyCertSign
      - cRLSign
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
  tags: ssl-ca

- name: Generate CA certificate
  openssl_certificate:
    path: "{{ ca_cert_file }}"
    privatekey_path: "{{ ca_key_file }}"
    csr_path: "{{ mongodb_ssl_cert_dir }}/ca.csr"
    provider: selfsigned
    selfsigned_not_after: "+{{ ssl_cert_validity_days }}d"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0644'
  tags: ssl-ca

- name: Generate server private key
  openssl_privatekey:
    path: "{{ server_key_file }}"
    size: "{{ ssl_key_size }}"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0400'
  tags: ssl-server

- name: Generate server certificate signing request
  openssl_csr:
    path: "{{ mongodb_ssl_cert_dir }}/server.csr"
    privatekey_path: "{{ server_key_file }}"
    common_name: "{{ inventory_hostname }}"
    country_name: "{{ ssl_country }}"
    state_or_province_name: "{{ ssl_state }}"
    locality_name: "{{ ssl_city }}"
    organization_name: "{{ ssl_organization }}"
    organizational_unit_name: "{{ ssl_organizational_unit }}"
    subject_alt_name:
      - "DNS:{{ inventory_hostname }}"
      - "DNS:localhost"
      - "IP:{{ ansible_default_ipv4.address }}"
      - "IP:127.0.0.1"
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
  tags: ssl-server

- name: Generate server certificate
  openssl_certificate:
    path: "{{ server_cert_file }}"
    csr_path: "{{ mongodb_ssl_cert_dir }}/server.csr"
    ownca_path: "{{ ca_cert_file }}"
    ownca_privatekey_path: "{{ ca_key_file }}"
    provider: ownca
    ownca_not_after: "+{{ ssl_cert_validity_days }}d"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0644'
  tags: ssl-server

- name: Combine server key and certificate into PEM file
  shell: |
    cat {{ server_key_file }} {{ server_cert_file }} > {{ mongodb_ssl_server_cert }}
    chown {{ mongodb_user }}:{{ mongodb_group }} {{ mongodb_ssl_server_cert }}
    chmod 0600 {{ mongodb_ssl_server_cert }}
  args:
    creates: "{{ mongodb_ssl_server_cert }}"
  tags: ssl-server

- name: Copy CA certificate to final location
  copy:
    src: "{{ ca_cert_file }}"
    dest: "{{ mongodb_ssl_ca_cert }}"
    remote_src: true
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0644'
  tags: ssl-ca

- name: Generate client private key
  openssl_privatekey:
    path: "{{ client_key_file }}"
    size: "{{ ssl_key_size }}"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0400'
  tags: ssl-client

- name: Generate client certificate signing request
  openssl_csr:
    path: "{{ mongodb_ssl_cert_dir }}/client.csr"
    privatekey_path: "{{ client_key_file }}"
    common_name: "{{ ssl_cert_config.client.common_name }}"
    country_name: "{{ ssl_country }}"
    state_or_province_name: "{{ ssl_state }}"
    locality_name: "{{ ssl_city }}"
    organization_name: "{{ ssl_organization }}"
    organizational_unit_name: "{{ ssl_organizational_unit }}"
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
  tags: ssl-client

- name: Generate client certificate
  openssl_certificate:
    path: "{{ client_cert_file }}"
    csr_path: "{{ mongodb_ssl_cert_dir }}/client.csr"
    ownca_path: "{{ ca_cert_file }}"
    ownca_privatekey_path: "{{ ca_key_file }}"
    provider: ownca
    ownca_not_after: "+{{ ssl_cert_validity_days }}d"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0644'
  tags: ssl-client

- name: Combine client key and certificate into PEM file
  shell: |
    cat {{ client_key_file }} {{ client_cert_file }} > {{ mongodb_ssl_client_cert }}
    chown {{ mongodb_user }}:{{ mongodb_group }} {{ mongodb_ssl_client_cert }}
    chmod 0644 {{ mongodb_ssl_client_cert }}
  args:
    creates: "{{ mongodb_ssl_client_cert }}"
  tags: ssl-client

- name: Remove temporary CSR files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ mongodb_ssl_cert_dir }}/ca.csr"
    - "{{ mongodb_ssl_cert_dir }}/server.csr"
    - "{{ mongodb_ssl_cert_dir }}/client.csr"
  tags: cleanup

- name: Update MongoDB configuration for security
  template:
    src: ../mongodb-install/templates/mongod.conf.j2
    dest: "{{ mongodb_config_file }}"
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_group }}"
    mode: '0644'
    backup: true
  notify: restart mongod
  tags: config

- name: Start MongoDB with security enabled
  systemd:
    name: mongod
    state: started
    enabled: true
  tags: service
